float4x4 MATRIX_INVERSETRANSPOSEWV;
struct SurfaceOutput
{
	float3 DiffuseColor;
	float3 Normal;
	float3 Emission;
	float3 SpecularColor;
	float  SpecularPower;
	float   Alpha;
};

float3 CalLight(SurfaceOutput o,float atten,float3 viewDir,float3 lightDir,float lightIntensity,float3 lightColor)
{
	o.Normal = normalize(o.Normal);
    lightDir = normalize(lightDir);
    //lightDir.z = -lightDir.z;
	float3	Hn = normalize(lightDir+viewDir);
	float 	hdn = saturate(dot(Hn,o.Normal)) ;
    float 	ldn = saturate(dot(lightDir,o.Normal));
    float3 spec = pow (hdn, o.SpecularPower) * o.SpecularColor * ldn;
//return float4(o.Normal,1.0f);
   // return ldn;
    //return o.Normal.x;
   // return o.DiffuseColor * ldn;
  	return (o.DiffuseColor * ldn + spec) * lightIntensity * lightColor;

    
    
}