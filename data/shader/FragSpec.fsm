struct PS_INPUT
{
    float3	Normal			: TEXCOORD0; 
    float2	TC		  		: TEXCOORD1;
	float3	worldPosition	: TEXCOORD2;
	float3	Tangent			: TEXCOORD3;
	float3	Binormal		: TEXCOORD4;
	float3	WorldEyeVec		: TEXCOORD5;
};
//float3 VIEW_POS;
static const float4 ambientColor = {0.1f,0.1f,0.1f,1.0f};
static const float3 lightDir = {0.0f,1.0f,-1.0f};
static const float4	lightColor = {0.7f,0.7f,0.7f,1.0f};
static const float	lightIntensity = 0.5f;
static const float	Ks = 0.8f;
static const float	Kd = 1.0f;
static const float SpecExpon = 32.0f;
//
sampler DiffuseColor = sampler_state
{
};
sampler EmissiveColor = sampler_state
{
};
sampler NormalMap = sampler_state
{
};
sampler SpecularColor = sampler_state
{
};
float4 pMain(PS_INPUT input):Color0
{
   	//PS_OUTPUT output = (PS_OUTPUT)0;
	
	float3 Nt = tex2D(NormalMap,input.TC.xy).xyz * 2 - 1;
    float3 Nn = normalize(input.Normal);
    float3 Tn = normalize(input.Tangent);
    float3 Bn = normalize(input.Binormal);
	float3x3 tbn  = float3x3(Tn,Bn,Nn);
	float3 Nb = mul(Nt,tbn);
    Nb = normalize(Nb);
	float3 lightDirNomralize = normalize(lightDir);
	//?????
	float3	viewDir = normalize(input.WorldEyeVec);
	float3	gloss = Ks * tex2D(SpecularColor,input.TC.xy).xyz;
	//???????
	float3	Hn = normalize(lightDirNomralize + viewDir);
	float hdn = saturate(dot(Hn,Nb));
    float ldn = saturate(dot(lightDirNomralize,Nb));
	float4 litV = lit(ldn,hdn,SpecExpon);
	float3 incident =    litV.y * lightColor.rgb;
    float3 diffContrib = incident;
    float3 specContrib = litV.z * gloss * lightColor.rgb;
	//
	float4 texColor = tex2D(DiffuseColor,input.TC);
	
	
	
	float4 outputColor;
	outputColor.rgb = (ambientColor + diffContrib) * Kd * texColor.rgb + specContrib;
	//output.Color.rgb = diffContrib;
	outputColor.a = texColor.a;
	//return float4(specContrib,1.0f);
	//outputColor = float4(Nn,1.0f);
	return outputColor;
}