struct PS_OUTPUT
{
	float4 Color:Color0;
};
struct PS_INPUT
{
    float4	Normal			: TEXCOORD0; 
    float2	TC		  		: TEXCOORD1;
	float3	worldPosition	: TEXCOORD2;
	float3	Tangent			: TEXCOORD3;
	float3	Binormal		: TEXCOORD4;
};
static const float4 ambientColor = {0.0f,0.0f,0.0f,1.0f};
static const float3 lightDir = {0.0f,1.0f,-1.0f};
static const float4	lightColor = {0.2f,0.2f,0.2f,1.0f};
static const float	lightIntensity = 2.0f;
sampler DiffuseColor = sampler_state
{
};
sampler EmissiveColor = sampler_state
{
};
sampler NormalMap = sampler_state
{
};
sampler SpecularColor = sampler_state
{
};
PS_OUTPUT pMain(PS_INPUT input)
{
   	PS_OUTPUT output = (PS_OUTPUT)0;
	
	float3 Nt = tex2D(NormalMap,input.TC.xy).xyz * 2 - 1;
    float3 Nn = normalize(input.Normal);
    float3 Tn = normalize(input.Tangent);
    float3 Bn = normalize(input.Binormal);
	float3x3 tbn  = float3x3(Tn,Bn,Nn);
	float3 Nb = mul(Nt,tbn);
    Nb = normalize(Nb);


	output.Color = 0.0f;
	float3 lightDirNomralize = normalize(lightDir);
	float3 worldNormal = normalize(input.Normal);
	float4 radianceColor = ambientColor + dot(Nb,lightDirNomralize)* lightColor * lightIntensity;
	output.Color.rgb = tex2D(DiffuseColor, input.TC).rgb * radianceColor;
	//output.Color.rgb = abs(Nn);
	return output;
}